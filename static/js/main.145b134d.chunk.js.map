{"version":3,"sources":["images/grey.png","images/green.png","images/dark-blue.png","images/pink.png","images/blue.png","components/gameOver.js","pages/lose.js","components/keyboardLayout.js","pages/nextRound.js","components/win.js","components/guessWord.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GameOver","className","alt","src","greyMonster","Lose","changeTry","setScore","score","greenMonster","onClick","e","preventDefault","ukrainian","default","shift","NextRound","openModal","word","setGuessedWords","guessedWord","useState","modalIsOpen","setIsOpen","closeModal","useEffect","isOpen","onRequestClose","contentLabel","ariaHideApp","darkBlueMonster","guessed","concat","Win","pinkMonster","GuessWord","tryCount","incorrectChars","setIncorrectChars","correctChars","setCorrectChars","wordData","setWordData","setword","wordLength","setWorldLength","totalWin","setTotalWin","correct","Set","incorrect","randomWordData","data","dataLength","length","Math","floor","random","filter","includes","name","getRandomWord","wordSet","Array","from","split","blueMonster","value","map","el","index","key","style","marginTop","onKeyPress","button","toLowerCase","add","layout","buttonTheme","class","buttons","join","Main","newScore","Number","window","localStorage","getItem","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.145b134d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/grey.41c6ea9f.png\";","module.exports = __webpack_public_path__ + \"static/media/green.0bbb3d8f.png\";","module.exports = __webpack_public_path__ + \"static/media/dark-blue.5e3b8999.png\";","module.exports = __webpack_public_path__ + \"static/media/pink.e8150a79.png\";","module.exports = __webpack_public_path__ + \"static/media/blue.c56718d2.png\";","import React from 'react';\r\nimport greyMonster from 'images/grey.png';\r\n\r\nconst GameOver = () => (\r\n  <div className=\"content\">\r\n    <h2 className=\"game-over\">Та всьо!</h2>\r\n    <span>Треба піти ще повчитись.</span><br />\r\n    <img alt=\"monster\" src={greyMonster} className=\"grey-monster\" />\r\n  </div>\r\n);\r\n\r\nexport default GameOver;\r\n","import React from 'react';\r\n\r\nimport GameOver from 'components/gameOver';\r\nimport greenMonster from 'images/green.png';\r\n\r\nconst Lose = ({ changeTry, setScore, score }) => (\r\n  <div>\r\n    {score === 0\r\n      ? <GameOver />\r\n      : <div className=\"content\">\r\n          <h4>От халепа, це не правильно.</h4>\r\n          <div>-20 балів!</div>\r\n          <img alt=\"green monster\" src={greenMonster} className=\"green-monster\" />\r\n          <button\r\n            className=\"green-button\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              setScore(score - 20);\r\n              changeTry(0);\r\n            }}\r\n          >\r\n            Спробувати ще!\r\n          </button>\r\n        </div>\r\n    }\r\n  </div>\r\n);\r\n\r\nexport default Lose;\r\n","const ukrainian = {\r\n  default: [\r\n    \"\\u0027 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n    \"{tab} \\u0439 \\u0446 \\u0443 \\u043a \\u0435 \\u043d \\u0433 \\u0448 \\u0449 \\u0437 \\u0445 \\u0457 \\\\\",\r\n    \"{lock} \\u0444 \\u0456 \\u0432 \\u0430 \\u043f \\u0440 \\u043e \\u043b \\u0434 \\u0436 \\u0454 {enter}\",\r\n    \"{shift} \\\\ \\u044f \\u0447 \\u0441 \\u043c \\u0438 \\u0442 \\u044c \\u0431 \\u044e / {shift}\",\r\n    \".com @ {space}\"\r\n  ],\r\n  shift: [\r\n    '\\u20B4 ! \" \\u2116 ; % : ? * ( ) _ + {bksp}',\r\n    \"{tab} \\u0419 \\u0426 \\u0423 \\u041a \\u0415 \\u041d \\u0413 \\u0428 \\u0429 \\u0417 \\u0425 \\u0407 /\",\r\n    \"{lock} \\u0424 \\u0406 \\u0412 \\u0410 \\u041f \\u0420 \\u041e \\u041b \\u0414 \\u0416 \\u0404 {enter}\",\r\n    \"{shift} / \\u042f \\u0427 \\u0421 \\u041c \\u0418 \\u0422 \\u042c \\u0411 \\u042e / {shift}\",\r\n    \".com @ {space}\"\r\n  ]\r\n};\r\n\r\nexport default ukrainian;","import React, { useState, useEffect } from 'react';\r\nimport Modal from 'react-modal';\r\nimport darkBlueMonster from 'images/dark-blue.png';\r\n\r\nconst NextRound = ({ changeTry, openModal, setScore, score, word, setGuessedWords, guessedWord }) => {\r\n  const [modalIsOpen, setIsOpen] = useState(false);\r\n  useEffect(() => {\r\n    openModal && setIsOpen(true)\r\n  }, [openModal]);\r\n\r\n  function closeModal(){\r\n    setIsOpen(false);\r\n  }\r\n  return (\r\n    <Modal\r\n      isOpen={modalIsOpen}\r\n      onRequestClose={closeModal}\r\n      contentLabel=\"Next round\"\r\n      ariaHideApp={false}\r\n    >\r\n      <div className=\"next-round\">\r\n        <h2>Правильно!</h2>\r\n        <span>Вам нараховано + 5 балів!</span>\r\n        <p>Ваш рахунок: {score + 5}</p>\r\n        <img alt=\"monster\" src={darkBlueMonster} className=\"dark-blue-monster\" />\r\n        <button\r\n          className=\"dark-blue-button\"\r\n          onClick={e => {\r\n            e.preventDefault();\r\n            setScore(score + 5);\r\n            const guessed = guessedWord.concat(word);\r\n            setGuessedWords(guessed)\r\n            changeTry(0);\r\n            closeModal();\r\n          }}\r\n        >\r\n          Продовжити\r\n        </button>\r\n      </div>\r\n    </Modal>\r\n  )\r\n};\r\n\r\nexport default NextRound;\r\n","import React from 'react';\r\nimport pinkMonster from 'images/pink.png';\r\n\r\nconst Win = ({score}) => (\r\n  <div className=\"content\">\r\n    <h2 className=\"win-score\">Вітаємо!</h2>\r\n    <span>Пройти всю гру та виграти, вау!</span><br />\r\n    <span>Далеко не кожному це під силу.</span>\r\n    <div>Ваш рахунок: <span className=\"win-score\">{score}</span></div>\r\n    <img alt=\"monster\" src={pinkMonster} className=\"pink-monster\" />\r\n  </div>\r\n);\r\n\r\nexport default Win;\r\n","import React, { useState, useEffect } from 'react';\r\nimport data from '../data.json';\r\n\r\n// components\r\nimport Keyboard from 'react-simple-keyboard';\r\nimport 'react-simple-keyboard/build/css/index.css';\r\nimport ukrainian from './keyboardLayout';\r\nimport NextRound from 'pages/nextRound';\r\nimport Win from 'components/win';\r\nimport blueMonster from 'images/blue.png';\r\n\r\nfunction getRandomWord(data, guessedWord) {\r\n  const dataLength = data.length && data.length - 1;\r\n  if (data.length === guessedWord.length) return null; \r\n  if (guessedWord.length === 0) {\r\n    return data[Math.floor(Math.random() * Math.floor(dataLength))];\r\n  } else {\r\n    return data.filter(word => !guessedWord.includes(word.name))[Math.floor(Math.random() * Math.floor(dataLength))];\r\n  }\r\n}\r\n\r\nconst GuessWord = ({ tryCount, changeTry, incorrectChars, setIncorrectChars, correctChars, setCorrectChars, score, setScore}) => {\r\n  const [wordData, setWordData] = useState(null);\r\n  const [word, setword] = useState([]);\r\n  const [wordLength, setWorldLength] = useState(null);\r\n  const [totalWin, setTotalWin] = useState(false);\r\n\r\n  // set all correct word for non repeated\r\n  const [guessedWord, setGuessedWords] = useState([]);\r\n\r\n  const correct = new Set(correctChars);\r\n  const incorrect = new Set(incorrectChars);\r\n\r\n  \r\n  useEffect(() => {\r\n    if(tryCount === 0){ \r\n      const randomWordData = getRandomWord(data, guessedWord);\r\n      if (randomWordData) {\r\n        const wordSet = new Set(randomWordData.name);\r\n        setWorldLength(Array.from(wordSet).length);\r\n        setWordData(randomWordData);\r\n        setword(randomWordData.name.split(''))\r\n        setCorrectChars && setCorrectChars([]);\r\n        setIncorrectChars && setIncorrectChars([]);\r\n      } else {\r\n        setTotalWin(true);\r\n      }\r\n    }\r\n  }, [setWordData, tryCount, guessedWord, setCorrectChars, setIncorrectChars]);\r\n\r\n  const onKeyPress = (button) => {\r\n    if(word.includes(button.toLowerCase())) {\r\n      correct.add(button.toLowerCase());\r\n      setCorrectChars && setCorrectChars(Array.from(correct))\r\n    } else {\r\n      changeTry(tryCount+1);\r\n      incorrect.add(button.toLowerCase());\r\n      setIncorrectChars && setIncorrectChars(Array.from(incorrect))\r\n    }\r\n  }\r\n \r\n  return (\r\n    totalWin\r\n    ? <Win score={ score } />\r\n    : word.length\r\n    ? (\r\n      <div className=\"content\">\r\n        <div className=\"score\">Рахунок: {score}</div>\r\n          <h2 className=\"title\">Опис:</h2>\r\n          \r\n          <img alt=\"monster\" src={blueMonster} className=\"blue-monster\" />\r\n          <span>{wordData && wordData.value}</span>\r\n        <div className=\"game-box\">\r\n          <div className=\"words-box\">\r\n            {word.map((el, index) => {\r\n              return (\r\n              <div key={index} className=\"word\">\r\n                {correctChars.length && correctChars.includes(el) ? el : null}\r\n              </div> \r\n              )}\r\n            )}\r\n          </div>\r\n          {correctChars.length === wordLength \r\n            && <NextRound\r\n            changeTry={changeTry}\r\n            openModal\r\n            setScore={ setScore }\r\n            score={ score }\r\n            setGuessedWords={setGuessedWords}\r\n            guessedWord={guessedWord}\r\n            word={ wordData.name }\r\n            />\r\n          }\r\n          <Keyboard\r\n            style={{ marginTop: \"38px\" }}\r\n            onKeyPress={button => onKeyPress(button)}\r\n            layout={ukrainian}\r\n            buttonTheme={[\r\n              {\r\n                class: \"choosen-incorrect\",\r\n                buttons: incorrectChars && incorrectChars.join(' ')\r\n              },\r\n              {\r\n                class: \"choosen-correct\",\r\n                buttons: correctChars && correctChars.join(' ')\r\n              }\r\n            ]}\r\n            />\r\n        </div>\r\n      </div>\r\n    )\r\n    : <div className=\"content\">Завантажую ...</div>\r\n  )\r\n}\r\n\r\n\r\nexport default GuessWord;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport Lose from 'pages/lose';\r\nimport GuessWord from 'components/guessWord';\r\n\r\n\r\nconst Main = () => {\r\n  const [tryCount, changeTry] = useState(0);\r\n\r\n  const [correctChars, setCorrectChars] = useState([]);\r\n  const [incorrectChars, setIncorrectChars] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let newScore = Number(window.localStorage.getItem('score'));\r\n    setScore(newScore)\r\n  }, [setScore]);\r\n\r\n\r\n  return (\r\n    <div className=\"container-main device\">\r\n    {(tryCount > 3 || score < 0)\r\n    ? \r\n      <Lose changeTry={changeTry} setScore={setScore} score={score} />\r\n    : \r\n      <GuessWord\r\n        incorrectChars={incorrectChars}\r\n        setIncorrectChars={setIncorrectChars}\r\n        setCorrectChars={setCorrectChars}\r\n        correctChars={correctChars}\r\n        score={score}\r\n        tryCount={tryCount}\r\n        changeTry={changeTry}\r\n        setScore={setScore}\r\n      />\r\n      }\r\n    </div>\r\n \r\n  ) \r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from 'components/main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <div className=\"container\">\n          <Main />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}